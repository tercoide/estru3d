var txHormigon = new THREE.TextureLoader().load( 'https://192.168.0.2:8080/hormigon5.jpg');

txHormigon.wrapS = THREE.RepeatWrapping;
txHormigon.wrapT = THREE.RepeatWrapping;
//txHormigon.repeat.set( 1, 10 );

var hormigon = new THREE.MeshPhysicalMaterial(  { map: txHormigon } );


// parametros del material
hormigon.transparent = false;
hormigon.opacity = 1; // (0 a 1)
// folder.add( hormigon, 'blending', constants.blendingMode );
// folder.add( hormigon, 'blendSrc', constants.destinationFactors );
// folder.add( hormigon, 'blendDst', constants.destinationFactors );
// folder.add( hormigon, 'blendEquation', constants.equations );
hormigon.depthTest = true;
hormigon.depthWrite = true;
// hormigon.polygonOffset;
// hormigon.polygonOffsetFactor;
// hormigon.polygonOffsetUnits;
hormigon.alphaTest = 1; // ( 0 to 1 )
hormigon.visible= true;
hormigon.side = THREE.DoubleSide;


/*  hormigon.emissive.getHex(),
  envMaps: envMapKeys[ 0 ],
  map: diffuseMapKeys[ 0 ],
  roughnessMap: roughnessMapKeys[ 0 ],
  alphaMap: alphaMapKeys[ 0 ]
*/

hormigon.roughness =1; //( 0 a  1 );
hormigon.metalness =0; // (0 a 1 );
hormigon.reflectivity = 0; // ( 0 a 1 )
hormigon.clearcoat = 0 ; // (0 a 1)
hormigon.clearcoatRoughness = 1; // (0  a 1)
//folder.add( hormigon, 'flatShading' ).onChange( needsUpdate( hormigon, geometry ) );
hormigon.wireframe = false;
hormigon.wireframeLinewidth = 1 ; // ( 0 a 10 );
hormigon.vertexColors = false;
// folder.add( hormigon, 'fog' );
// folder.add( data, 'envMaps', envMapKeys ).onChange( updateTexture( hormigon, 'envMap', envMaps ) );
// folder.add( data, 'map', diffuseMapKeys ).onChange( updateTexture( hormigon, 'map', diffuseMaps ) );
// folder.add( data, 'roughnessMap', roughnessMapKeys ).onChange( updateTexture( hormigon, 'roughnessMap', roughnessMaps ) );
// folder.add( data, 'alphaMap', alphaMapKeys ).onChange( updateTexture( hormigon, 'alphaMap', alphaMaps ) );


var Tgeometry = new THREE.BufferGeometry();
Tgeometry.setAttribute( 'position', new THREE.BufferAttribute(new Float32Array(Tvertices), 3));
Tgeometry.setAttribute( 'color', new THREE.BufferAttribute(new Float32Array(Tcolores), 3));
Tgeometry.setAttribute( 'normal', new THREE.BufferAttribute(new Float32Array(Tnormals), 3));
Tgeometry.setAttribute( 'uv', new THREE.BufferAttribute(new Float32Array(TUVs), 2));

var triang = new THREE.Mesh(Tgeometry, hormigon);
scene.add( triang );


var geometry = new THREE.BoxBufferGeometry( 0.5, 0.8, 0.5 );
var material = new THREE.MeshStandardMaterial( {
 color: 0x444444,
 roughness: 1.0,
 metalness: 0.0
} );
var table = new THREE.Mesh( geometry, hormigon );
table.position.y = 0.35;
table.position.z = 0.85;
scene.add( table );




//

window.addEventListener( 'resize', onWindowResize, false );

}
// Fin del init


function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize( window.innerWidth, window.innerHeight );

  }

  //

  function handleController( controller ) {

    var userData = controller.userData;
    var painter = userData.painter;

    var pivot = controller.getObjectByName( 'pivot' );

    if ( userData.isSqueezing === true ) {

      var delta = ( controller.position.y - userData.positionAtSqueezeStart ) * 5;
      var scale = Math.max( 0.1, userData.scaleAtSqueezeStart + delta );

      pivot.scale.setScalar( scale );
      painter.setSize( scale );

    }

    cursor.setFromMatrixPosition( pivot.matrixWorld );

    if ( userData.isSelecting === true ) {

       painter.lineTo( cursor );
       painter.update();

    } else {

       painter.moveTo( cursor );

    }

  }


  function animate() {

    renderer.setAnimationLoop( render );

  }

  function render() {

     handleController( controller1 );
     handleController( controller2 );

    renderer.render( scene, camera );

  }

</script>
</body>
</html>
