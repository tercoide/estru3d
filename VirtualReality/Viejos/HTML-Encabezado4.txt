<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Estru3D</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<style>
			body {
				background-color: #fff;
				color: #444;
			}
			a {
				color: #08f;
			}
		</style>
	</head>
	<body>

		<div id="info">
		Estru3D WebGL VR Version 0.1
		</div>

		<div id="container"></div>



		<script type="module">

		// Variables globales?

		var effect, controls;

		// Pedido de origen cruzado bloqueado: La política de mismo origen no permite leer el recurso remoto
		// en file:///home/martin/node_modules/three/examples/build/three.module.js. (Razón: pedido CORS no es http).

		// Simplemente hacer referncia remota a las librerias.

			import * as THREE from 'https://threejs.org/build/three.module.js';

			import { OrbitControls } from 'https://threejs.org/examples/jsm/controls/OrbitControls.js';

			import { VRButton } from 'https://threejs.org/examples/jsm/webxr/VRButton.js';
			import { TubePainter } from 'https://threejs.org/examples/jsm/misc/TubePainter.js'
			import Stats from 'https://threejs.org/examples/jsm/libs/stats.module.js';

			import { TrackballControls } from 'https://threejs.org/examples/jsm/controls/TrackballControls.js';
			import { BufferGeometryUtils } from 'https://threejs.org/examples/jsm/utils/BufferGeometryUtils.js';


			  var container;
				var camera, scene, renderer;
				var controller1, controller2;

				var cursor = new THREE.Vector3();

				var controls;

				init();
				animate();

				function init() {

					container = document.createElement( 'div' );
					document.body.appendChild( container );

					scene = new THREE.Scene();
					scene.background = new THREE.Color( 0xffffff );

					camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.01, 50 );
					camera.position.set( 0, 1.6, 3 );

					controls = new OrbitControls( camera, container );
					controls.target.set( 0, 1.6, 0 );
					controls.update();


					var geometry = new THREE.PlaneBufferGeometry( 4, 4 );
					var material = new THREE.MeshStandardMaterial( {
						color: 0x222222,
						roughness: 1.0,
						metalness: 0.0
					} );
					var floor = new THREE.Mesh( geometry, material );
					floor.rotation.x = - Math.PI / 2;
					scene.add( floor );

					var grid = new THREE.GridHelper( 100, 100, 0x111111, 0x111111 );
					// grid.material.depthTest = false; // avoid z-fighting
					scene.add( grid );



					scene.background = new THREE.Color( 0x56bdf2 );
					scene.fog = new THREE.Fog( 0x66737a, 2000, 3500 );

					var ambientLight = new THREE.AmbientLight( 0x000000 );
					scene.add( ambientLight );

					var lights = [];
					lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );
					lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );
					lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );

					lights[ 0 ].position.set( 0, 200, 0 );
					lights[ 1 ].position.set( 100, 200, 100 );
					lights[ 2 ].position.set( - 100, - 200, - 100 );

					scene.add( lights[ 0 ] );
					scene.add( lights[ 1 ] );
					scene.add( lights[ 2 ] );

					//


					var painter1 = new TubePainter();
					scene.add( painter1.mesh );

					var painter2 = new TubePainter();
					scene.add( painter2.mesh );

					//

					renderer = new THREE.WebGLRenderer( { antialias: true } );
					renderer.setPixelRatio( window.devicePixelRatio );
					renderer.setSize( window.innerWidth, window.innerHeight );
					renderer.outputEncoding = THREE.sRGBEncoding;
					renderer.xr.enabled = true;
					container.appendChild( renderer.domElement );

					document.body.appendChild( VRButton.createButton( renderer ) );

					// controllers

					function onSelectStart() {

						this.userData.isSelecting = true;

					}

					function onSelectEnd() {

						this.userData.isSelecting = false;

					}

					function onSequeezeStart() {

						this.userData.isSqueezing = true;
						this.userData.positionAtSqueezeStart = this.position.y;
						this.userData.scaleAtSqueezeStart = this.scale.x;

					}

					function onSqueezeEned() {

						this.userData.isSqueezing = false;

					}

					controller1 = renderer.xr.getController( 0 );
					controller1.addEventListener( 'selectstart', onSelectStart );
					controller1.addEventListener( 'selectend', onSelectEnd );
					controller1.addEventListener( 'squeezestart', onSequeezeStart );
					controller1.addEventListener( 'squeezeend', onSqueezeEned );
					controller1.userData.painter = painter1;
					scene.add( controller1 );

					controller2 = renderer.xr.getController( 1 );
					controller2.addEventListener( 'selectstart', onSelectStart );
					controller2.addEventListener( 'selectend', onSelectEnd );
					controller2.addEventListener( 'squeezestart', onSequeezeStart );
					controller2.addEventListener( 'squeezeend', onSqueezeEned );
					controller2.userData.painter = painter2;
					scene.add( controller2 );

					//

					var geometry = new THREE.CylinderBufferGeometry( 0.01, 0.02, 0.08, 5 );
					geometry.rotateX( - Math.PI / 2 );
					var material = new THREE.MeshStandardMaterial( { flatShading: true } );
					var mesh = new THREE.Mesh( geometry, material );

					var pivot = new THREE.Mesh( new THREE.IcosahedronBufferGeometry( 0.01, 2 ) );
					pivot.name = 'pivot';
					pivot.position.z = - 0.05;
					mesh.add( pivot );

					controller1.add( mesh.clone() );
					controller2.add( mesh.clone() );
